# -*- coding: utf-8 -*-
"""딥러닝 연습

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fSxrToJZeN8kY7kDevOLb0zMpsFU8_qk

numpy 연습
"""

import numpy as np #넘파이 import(np라는 이름으로 사용)
print(np.__version__)# 버전 확인 

np_arr = np.array([[10,20,30], [40,50,60]])# 2차원 numpy 배열 생성
print(np_arr)#출력 
#[[10 20 30]
 #[40 50 60]]<-이렇게 나옴
type(np_arr)# 배열 타입 numpy.ndarray
print(np_arr[0][2])# 요소 선택
#내장 함수
np.sum(np_arr)# 210 출

"""맷플롯립(Matplotlib)으로 그래프 그리기.
맷플롯립은 파이썬 과학 생태계의 표준 그래프 패키지를 말한다.
대부분의 그래프를 그릴 수 있다.
"""

import matplotlib.pyplot as plt# 맷플롯립 import

#선 그래프, 산점도 그리기. 두 그래프는 x축을 기준으로 y축의 변화 추이를 살펴보기 편리해 데이터 분석에 자주 사용

# 선 그래프 그리기
plt.plot([1,2,3,4,5],[1,4,9,16,25])# 첫번째 리스트는 x축, 두번째 리스트는 y축의 값이다.
plt.show()# 그래프가 그려진다.
# 산점도 그리기
# 산점도는 데이터의 x축, y축 값을 이용해 점으로 그래프를 그린 것. 
# 이 때 show()를 사용하지 않아도 자동으로 그래프가 그려지지만 show()으로 더 깔끔하고 보기 좋은 그래프를 그릴 수 있다. 
plt.scatter([1,2,3,4,5],[1,4,9,16,25])# 점 생성
plt.show()# 표

# 넘파이 배열로 선점도 그리기
# 파이썬의 과학 패키지들은 예외 없이 넘파이 배열로 데이터 주고받을 수 있게 개발되었다.

# 넘파이의 random.randn() 함수를 사용해 표준 정규 분포를 따르는 난수를 만들고 그 값을 이용해 선점도를 그려보기
x = np.random.randn(1000)# 표준 정규 분포를 따르는 난수 생성
y = np.random.randn(1000)# 난수 생성
plt.scatter(x, y)
plt.show()

# 데이터 분석과 그래프 도구는 뗄래야 뗄 수 없는 사이.
# 위와 같이 데이터를 시각화 하면 데이터의 직관성이 증가한다. 딥러닝에서 데이터 시각화는 필수.

"""머신 러닝 기초. - 수치 예측.

1. 선형 회귀\
머신 러닝 알고리즘 중 가장 간단하면서도 딥러닝의 기초가 되는 알고리즘. 선형 회귀는 간단한 1차 함수(y = ax + b)로 표현할 수 있다.\
선형회귀는 기울기와 절편을 찾는 알고리즘이라 할 수 있다.\
선형 회귀로 풀 수 있는 문제 유형\
'x가 3일 때 y는 25, x가 4일 때 y는 32, x가 5일 때 y는 39라면 기울기와 절편의 값으로 적당한 것은?'\
1) 기울기는 6, 절편은 4\
2) 기울기는 7, 절편은 5\
3) 기울기는 7, 절편은 4

선형회귀의 문제 해결 과정\
위 예제에서 보기 1번을 이용해 직선을 만들고 주어진 점 [(3,25), (4,32), (5,39)]들이 포함되었는지 확인
"""

import matplotlib.pyplot as plt

plt.axvline(x=0, color = 'r') # x
plt.axhline(y=0, color = 'r') # y축

plt.scatter([3,4,5],[25,32,39])# 점찍기

x = np.arange(0,10) 
y = 6*x + 4 #x에 대한 y값
plt.plot(x, y)#x, y값으로 직선 형성. 리스트로 만들 수 있지만 이렇게 함수를 이용해 그래프를 만들 수 있다.

plt.show()

"""위의 그래프를 보면 알 수 있듯 점이 포함되어 있지 않다. 그러니 보기 2번의 기울기, 절편을 이용해 직선을 만들어보자."""

import matplotlib.pyplot as plt

plt.axvline(x=0, color = 'r') # x
plt.axhline(y=0, color = 'r') # y축

plt.scatter([3,4,5],[25,32,39])# 점찍기

x = np.arange(0,10) 
y = 7*x + 5
plt.plot(x, y)

plt.show()

"""직선의 모양과 점 3개가 만드는 직선의 형태는 똑같으나 절편이 맞지 않는듯 하다. 그러니 절편만 줄여보자(보기 3의 조건으로 넘어간다.)"""

import matplotlib.pyplot as plt

plt.axvline(x=0, color = 'r') # x
plt.axhline(y=0, color = 'r') # y축

plt.scatter([3,4,5],[25,32,39])# 점찍기

x = np.arange(0,10) 
y = 7*x + 4
plt.plot(x, y)

plt.show()

"""완전히 들어맞는다.\
위 과정을 통해 만든 1차 함수들을 '선형 회귀로 만든 모델'이라고 한다. 마지막에 점 3개가 완전히 들어가는 1차 함수가 바로 최적의 선형 모델인 것이다.\
이러한 모델(최적의 선형 모델)을 통해 새로운 점에 대한 예측을 할 수 있게 된다.\
미리 준비한 입력(x : 3,4,5)과 타깃(y : 25,32,39)을 가지고 모델(y = 7x + 4)을 만든 다음 새 입력(6)에 대한 어떤 값(46)을 예상한 것.\
이것이 선형 회귀 모델을 만들어 문제를 해결하는 과정이다.

문제 해결 - 당뇨병 환자의 데이터\
당뇨병 환자의 1년 후 병의 진전된 정도를 예측하는 모델 생성
"""

# 사이킷런에서 당뇨병 환자 데이터 가져오기
# 머신러닝, 딥러닝 패키지에는 인공지능 학습을 위한 데이터 세트(dataset)가 준비되어 있다.
# 사이킷런과 케라스도 다양한 데이터 세트를 제공

from sklearn.datasets import load_diabetes # 사이킷런의 datasets 모듈에 있는 load_diabetes() 함수 임포트

# load_diabetes()로 당뇨병 데이터 준비
diabetes = load_diabetes() # diabetes에 당뇨병 데이터 저장
# diabetes 변수에 저장된 값의 자료형은 파이썬의 딕셔너리와 유사한 Bunch 클래스. 파이썬 딕셔너리라 생각해도 무방.

# 입력과 타깃 데이터의 크기 확인
# diabetes의 속성 중 data 속성과 target 속성에 입력, 타깃 데이터가 넘파이 배열로 저장되어 있다. 
# 넘파이 배열의 크기는 shape 속성에 저장되어 있다. 
# print(diabetes.data.shape, diabetes.target.shape) #(442, 10) (442, ) 출력
# data는 442*10(442개의 샘플, 10개의 샘플 특성) 크기의 2차원 배열. data의 행은 샘플(sample)이고 열은 샘플의 특성(feature)이다.
# 샘플이란 당뇨병 환자의 특성(환자의 혈압, 혈당, 몸무게 키, etc...)이고 샘플은 이에 해당하는 값(130, 27, 181,92, etc...)을 말한다. 
# 여기서 입력데이터의 특성은 속성 or 독립 변수 or 설명 변수(explanatory variable) 등으로 불린다. 

# 입력 데이터 자세히 보기
# diabetes.data[0:3]#0번 요소부터 3번 요소까지 출력(3*10 배)
# array([[ 0.03807591,  0.05068012,  0.06169621,  0.02187235, -0.0442235 ,
#        -0.03482076, -0.04340085, -0.00259226,  0.01990842, -0.01764613],
#       [-0.00188202, -0.04464164, -0.05147406, -0.02632783, -0.00844872,
#        -0.01916334,  0.07441156, -0.03949338, -0.06832974, -0.09220405],
#       [ 0.08529891,  0.05068012,  0.04445121, -0.00567061, -0.04559945,
#        -0.03419447, -0.03235593, -0.00259226,  0.00286377, -0.02593034]]) 출력

# 타깃 데이터 자세히 보기
# diabetes.target[:3] # array([151.,  75., 141.])출력
# 타깃 데이터는 샘플 1개에 대응되는 값들의 배열이다. 예를 들어 data[0] = (1*10 배열)에 해당하는 타깃 데이터는 target[0]이다. 
# 풀어서 표현하자면
# [ 0.03807591,  0.05068012,  0.06169621,  0.02187235, -0.0442235 ,
#  -0.03482076, -0.04340085, -0.00259226,  0.01990842, -0.01764613]라는 입력 데이터에 대응하는 타깃 데이터는 151.인 것이다.
# 수치의 의미는 전문가의 영역, 내가 할 일은 입력 데이터와 타깃 데이터의 수치만 보고 둘 사이의 규칙(모델)을 찾으면 된다.

# 당뇨병 환자의 데이터 시각화

# 맷플롯립 scatter()로 산점도 그리기
# 1개의 특성을 이용만 사용해 산점도 그리기

import matplotlib.pyplot as plt

# 다차원에서는 :를 기준으로 행, 열 분리
plt.scatter(diabetes.data[:,2], diabetes.target)# x축은 diabets의 3번째 특성(열의 인덱스가 2인 값), y축은 diabetes.target
plt.xlabel('x')
plt.ylabel('y')
plt.show()